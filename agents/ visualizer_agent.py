
 ============================================================================
# FICHIER 12: agents/visualizer_agent.py - Visualisation CORRIG√âE
# ============================================================================

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
from spade.agent import Agent
from spade.behaviour import CyclicBehaviour
from spade.message import Message
from spade.template import Template
import json
import os
from datetime import datetime

class AgroVisualizerAgent(Agent):
    """üé® Agent visualiseur pour rapports agricoles"""
    
    class CreateVisualizationsBehaviour(CyclicBehaviour):
        async def run(self):
            msg = await self.receive(timeout=10)
            
            if msg and msg.get_metadata("ontology") == "comparison_results":
                print("\nüé® [VISUALIZER] Cr√©ation des graphiques agricoles")
                
                try:
                    comparison_data = json.loads(msg.body)
                    results = comparison_data["all_results"]
                    
                    # Configurer le style
                    plt.style.use('default')  # CORRIG√â
                    
                    # Cr√©er figure avec sous-graphiques
                    fig, axes = plt.subplots(2, 2, figsize=(16, 12))
                    fig.suptitle('üåæ Analyse Comparative des Mod√®les Agricoles', 
                                fontsize=16, fontweight='bold')
                    
                    # 1. Graphique accuracy
                    models = [r["model_name"] for r in results]
                    accuracies = [r["accuracy"] for r in results]
                    colors = ['#2E8B57', '#4682B4', '#DAA520', '#CD853F', '#9370DB']
                    
                    bars = axes[0,0].bar(models, accuracies, color=colors)
                    axes[0,0].set_title('üìà Accuracy des Mod√®les', fontweight='bold')
                    axes[0,0].set_ylabel('Accuracy')
                    axes[0,0].set_ylim(0, 1)
                    
                    # Ajouter valeurs sur les barres
                    for bar, acc in zip(bars, accuracies):
                        height = bar.get_height()
                        axes[0,0].text(bar.get_x() + bar.get_width()/2., height + 0.01,
                                      f'{acc:.3f}', ha='center', va='bottom', fontweight='bold')
                    
                    axes[0,0].tick_params(axis='x', rotation=45)
                    
                    # 2. Temps d'entra√Ænement
                    times = [r["training_time"] for r in results]
                    bars2 = axes[0,1].bar(models, times, color=colors)
                    axes[0,1].set_title('‚è±Ô∏è Temps d\'Entra√Ænement', fontweight='bold')
                    axes[0,1].set_ylabel('Temps (secondes)')
                    
                    for bar, time_val in zip(bars2, times):
                        height = bar.get_height()
                        axes[0,1].text(bar.get_x() + bar.get_width()/2., height + max(times)*0.01,
                                      f'{time_val:.2f}s', ha='center', va='bottom', fontweight='bold')
                    
                    axes[0,1].tick_params(axis='x', rotation=45)
                    
                    # 3. Matrice de confusion du meilleur mod√®le
                    best_model = results[0]
                    y_test = np.array(best_model["y_test"])
                    y_pred = np.array(best_model["y_pred"])
                    
                    from sklearn.metrics import confusion_matrix
                    cm = confusion_matrix(y_test, y_pred)
                    
                    sns.heatmap(cm, annot=True, fmt='d', cmap='Greens',
                               xticklabels=['Pas d\'irrigation', 'Irrigation'],
                               yticklabels=['Pas d\'irrigation', 'Irrigation'],
                               ax=axes[1,0])
                    axes[1,0].set_title(f'üéØ Matrice de Confusion - {best_model["model_name"]}', 
                                       fontweight='bold')
                    axes[1,0].set_xlabel('Pr√©dictions')
                    axes[1,0].set_ylabel('R√©alit√©')
                    
                    # 4. Comparaison F1-Score
                    f1_scores = [r["f1_score"] for r in results]
                    precisions = [r["precision"] for r in results]
                    recalls = [r["recall"] for r in results]
                    
                    x = np.arange(len(models))
                    width = 0.25
                    
                    axes[1,1].bar(x - width, f1_scores, width, label='F1-Score', color='#2E8B57')
                    axes[1,1].bar(x, precisions, width, label='Precision', color='#4682B4')
                    axes[1,1].bar(x + width, recalls, width, label='Recall', color='#DAA520')
                    
                    axes[1,1].set_title('üìä M√©triques D√©taill√©es', fontweight='bold')
                    axes[1,1].set_ylabel('Score')
                    axes[1,1].set_xticks(x)
                    axes[1,1].set_xticklabels(models, rotation=45)
                    axes[1,1].legend()
                    axes[1,1].set_ylim(0, 1)
                    
                    plt.tight_layout()
                    
                    # Sauvegarder le graphique
                    plt.savefig('results/plots/agricultural_models_comparison.png', 
                               dpi=300, bbox_inches='tight')
                    print("üìä [VISUALIZER] Graphique principal sauvegard√©")
                    
                    # Cr√©er graphique importance des features (si disponible)
                    self.create_feature_importance_plot(results)
                    
                    # Cr√©er rapport HTML
                    self.create_html_report(comparison_data)
                    
                    # Cr√©er rapport texte
                    self.create_text_report(comparison_data)
                    
                    plt.close('all')  # CORRIG√â: Fermer les figures
                    
                    print("‚úÖ [VISUALIZER] Tous les rapports g√©n√©r√©s")
                    print("üìÅ [VISUALIZER] Fichiers dans 'results/'")
                    
                    # Notifier le coordinateur que c'est termin√©
                    msg = Message(to="coordinator@localhost")
                    msg.set_metadata("performative", "inform")
                    msg.set_metadata("ontology", "process_complete")
                    msg.body = "visualization_complete"
                    await self.send(msg)
                    
                except Exception as e:
                    print(f"‚ùå [VISUALIZER] Erreur: {e}")
        
        def create_feature_importance_plot(self, results):
            """Cr√©er graphique d'importance des features"""
            forest_result = None
            for result in results:
                if "feature_importance" in result:
                    forest_result = result
                    break
            
            if forest_result:
                plt.figure(figsize=(10, 6))
                features = forest_result["feature_names"]
                importance = forest_result["feature_importance"]
                
                # Trier par importance
                sorted_idx = np.argsort(importance)[::-1]
                
                plt.bar(range(len(features)), [importance[i] for i in sorted_idx], 
                       color='forestgreen')
                plt.title('üåø Importance des Param√®tres Agricoles (Random Forest)', 
                         fontweight='bold', fontsize=14)
                plt.xlabel('Param√®tres du Sol et Climat')
                plt.ylabel('Importance')
                plt.xticks(range(len(features)), [features[i] for i in sorted_idx], 
                          rotation=45, ha='right')
                
                plt.tight_layout()
                plt.savefig('results/plots/feature_importance.png', dpi=300, bbox_inches='tight')
                plt.close()
                print("üåø [VISUALIZER] Graphique d'importance des features sauvegard√©")
        
        def create_html_report(self, comparison_data):
            """Cr√©er rapport HTML"""
            html_content = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <title>üåæ Rapport d'Analyse Agricole</title>
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 40px; }}
                    .header {{ background-color: #2E8B57; color: white; padding: 20px; text-align: center; }}
                    .section {{ margin: 20px 0; padding: 15px; border: 1px solid #ddd; }}
                    .best {{ background-color: #d4edda; }}
                    .metric {{ display: inline-block; margin: 10px; padding: 10px; border: 1px solid #ccc; }}
                    table {{ border-collapse: collapse; width: 100%; }}
                    th, td {{ border: 1px solid #ddd; padding: 8px; text-align: center; }}
                    th {{ background-color: #f2f2f2; }}
                </style>
            </head>
            <body>
                <div class="header">
                    <h1>üåæ Rapport d'Analyse des Mod√®les Agricoles</h1>
                    <p>Pr√©diction des Besoins d'Irrigation - {datetime.now().strftime('%d/%m/%Y %H:%M')}</p>
                </div>
                
                <div class="section best">
                    <h2>üèÜ Meilleur Mod√®le</h2>
                    <h3>{comparison_data['best_model']['model_name']}</h3>
                    <div class="metric">
                        <strong>Accuracy:</strong> {comparison_data['best_model']['accuracy']:.4f}
                    </div>
                    <div class="metric">
                        <strong>Precision:</strong> {comparison_data['best_model']['precision']:.4f}
                    </div>
                    <div class="metric">
                        <strong>Recall:</strong> {comparison_data['best_model']['recall']:.4f}
                    </div>
                    <div class="metric">
                        <strong>F1-Score:</strong> {comparison_data['best_model']['f1_score']:.4f}
                    </div>
                </div>
                
                <div class="section">
                    <h2>üìä Comparaison Compl√®te</h2>
                    <table>
                        <tr>
                            <th>Rang</th>
                            <th>Mod√®le</th>
                            <th>Accuracy</th>
                            <th>Precision</th>
                            <th>Recall</th>
                            <th>F1-Score</th>
                            <th>Temps (s)</th>
                        </tr>"""
            
            for i, result in enumerate(comparison_data['all_results'], 1):
                html_content += f"""
                        <tr>
                            <td>{i}</td>
                            <td>{result['model_name']}</td>
                            <td>{result['accuracy']:.4f}</td>
                            <td>{result['precision']:.4f}</td>
                            <td>{result['recall']:.4f}</td>
                            <td>{result['f1_score']:.4f}</td>
                            <td>{result['training_time']:.2f}</td>
                        </tr>"""
            
            html_content += """
                    </table>
                </div>
            </body>
            </html>"""
            
            with open('results/reports/agricultural_analysis_report.html', 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            print("üåê [VISUALIZER] Rapport HTML cr√©√©")
        
        def create_text_report(self, comparison_data):
            """Cr√©er rapport texte d√©taill√©"""
            report = f"""
üåæ RAPPORT D'ANALYSE DES MOD√àLES AGRICOLES
{'='*60}
Date: {datetime.now().strftime('%d/%m/%Y %H:%M')}
Syst√®me Multi-Agent pour Pr√©diction d'Irrigation

üèÜ CLASSEMENT FINAL:
{'-'*30}
"""
            
            for i, result in enumerate(comparison_data['all_results'], 1):
                emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üìä"
                report += f"""
{emoji} {i}. {result['model_name']}
   Accuracy: {result['accuracy']:.4f} ({result['accuracy']*100:.2f}%)
   Precision: {result['precision']:.4f}
   Recall: {result['recall']:.4f}
   F1-Score: {result['f1_score']:.4f}
   Temps: {result['training_time']:.2f}s
"""
            
            stats = comparison_data['statistics']
            report += f"""

üìà STATISTIQUES GLOBALES:
{'-'*30}
Accuracy moyenne: {stats['mean_accuracy']:.4f}
Accuracy maximale: {stats['max_accuracy']:.4f}
Accuracy minimale: {stats['min_accuracy']:.4f}
Temps total: {stats['total_time']:.2f} secondes
Temps moyen: {stats['mean_time']:.2f} secondes

üí° RECOMMANDATIONS AGRICOLES:
{'-'*30}
‚Ä¢ Le mod√®le {comparison_data['best_model']['model_name']} est recommand√© pour la pr√©diction d'irrigation
‚Ä¢ Accuracy de {comparison_data['best_model']['accuracy']*100:.1f}% indique une {'excellente' if comparison_data['best_model']['accuracy'] > 0.9 else 'tr√®s bonne' if comparison_data['best_model']['accuracy'] > 0.85 else 'bonne'} fiabilit√©
‚Ä¢ Peut √™tre utilis√© pour optimiser l'irrigation et √©conomiser l'eau
‚Ä¢ R√©duction potentielle du gaspillage d'eau de {(1-comparison_data['statistics']['mean_accuracy'])*100:.1f}%

üå± IMPACT ENVIRONNEMENTAL:
{'-'*30}
‚Ä¢ Optimisation de l'usage de l'eau agricole
‚Ä¢ Am√©lioration du rendement des cultures
‚Ä¢ R√©duction de l'impact environnemental
‚Ä¢ Support √† l'agriculture de pr√©cision

üìÅ FICHIERS G√âN√âR√âS:
{'-'*30}
‚Ä¢ results/plots/agricultural_models_comparison.png
‚Ä¢ results/plots/feature_importance.png
‚Ä¢ results/reports/agricultural_analysis_report.html
‚Ä¢ results/models/ (mod√®les sauvegard√©s)
‚Ä¢ results/metrics/comparison_report.json

{'='*60}
Fin du rapport - Syst√®me Multi-Agent Agricole
"""
            
            with open('results/reports/agricultural_analysis_report.txt', 'w', encoding='utf-8') as f:
                f.write(report)
            
            print("üìù [VISUALIZER] Rapport texte cr√©√©")
    
    async def setup(self):
        print("üé® [VISUALIZER] Agent visualiseur agricole initialis√©")
        template = Template()
        template.set_metadata("ontology", "comparison_results")
        self.add_behaviour(self.CreateVisualizationsBehaviour(), template)
