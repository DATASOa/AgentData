#!/usr/bin/env python3
"""
üß™ Test simple du preprocessing et Logistic Regression
Sans SPADE pour v√©rifier que les donn√©es sont correctes
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

def test_data_loading():
    """Test du chargement des donn√©es"""
    print("üìÇ Test du chargement des donn√©es...")
    
    try:
        # Charger les donn√©es
        data = pd.read_csv("data/data-final1.csv")
        print(f"‚úÖ Donn√©es charg√©es: {data.shape}")
        print(f"üìä Colonnes: {list(data.columns)}")
        print(f"üéØ Distribution target:\n{data['besoin_irrigation'].value_counts()}")
        print(f"üå± Types de cultures: {data['label'].nunique()}")
        
        return data
        
    except Exception as e:
        print(f"‚ùå Erreur chargement: {e}")
        return None

def test_preprocessing(data):
    """Test du preprocessing"""
    print("\nüîß Test du preprocessing...")
    
    try:
        # S√©parer features et target
        X = data.drop(['besoin_irrigation'], axis=1)
        y = data['besoin_irrigation']
        
        # Encoder la variable 'label'
        le = LabelEncoder()
        X['label_encoded'] = le.fit_transform(X['label'])
        X = X.drop(['label'], axis=1)
        
        print(f"‚úÖ Label encoding termin√©")
        print(f"üìä Features apr√®s encoding: {X.shape}")
        print(f"üî¢ Colonnes finales: {list(X.columns)}")
        
        # Train/Test split
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42, stratify=y
        )
        
        # Normalisation
        scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)
        X_test_scaled = scaler.transform(X_test)
        
        print(f"‚úÖ Normalisation termin√©e")
        print(f"üìä Train: {X_train_scaled.shape}, Test: {X_test_scaled.shape}")
        
        return X_train_scaled, X_test_scaled, y_train, y_test, le, scaler
        
    except Exception as e:
        print(f"‚ùå Erreur preprocessing: {e}")
        return None

def test_logistic_regression(X_train, X_test, y_train, y_test):
    """Test de la r√©gression logistique"""
    print("\nüß† Test de la R√©gression Logistique...")
    
    try:
        # Cr√©er et entra√Æner le mod√®le
        model = LogisticRegression(max_iter=1000, random_state=42)
        
        print("üöÄ Entra√Ænement en cours...")
        model.fit(X_train, y_train)
        
        # Pr√©dictions
        y_pred = model.predict(X_test)
        y_pred_proba = model.predict_proba(X_test)[:, 1]
        
        # M√©triques
        accuracy = accuracy_score(y_test, y_pred)
        
        print(f"‚úÖ Entra√Ænement termin√©!")
        print(f"üéØ Accuracy: {accuracy:.4f}")
        
        # Rapport d√©taill√©
        print("\nüìä Rapport de classification:")
        print(classification_report(y_test, y_pred))
        
        # Matrice de confusion
        cm = confusion_matrix(y_test, y_pred)
        print(f"\nüîç Matrice de confusion:")
        print(cm)
        
        # Visualisation simple
        plt.figure(figsize=(8, 6))
        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
        plt.title('Matrice de Confusion - Logistic Regression')
        plt.ylabel('Vraie classe')
        plt.xlabel('Classe pr√©dite')
        plt.savefig('results/test_confusion_matrix.png')
        print("üìà Matrice sauvegard√©e: results/test_confusion_matrix.png")
        
        return model, accuracy
        
    except Exception as e:
        print(f"‚ùå Erreur Logistic Regression: {e}")
        return None, 0

def main():
    """Test principal"""
    print("üß™ TEST SIMPLE DU SYST√àME ML")
    print("=" * 50)
    
    # Test 1: Chargement
    data = test_data_loading()
    if data is None:
        return
    
    # Test 2: Preprocessing  
    result = test_preprocessing(data)
    if result is None:
        return
    
    X_train, X_test, y_train, y_test, le, scaler = result
    
    # Test 3: Logistic Regression
    model, accuracy = test_logistic_regression(X_train, X_test, y_train, y_test)
    
    if model is not None:
        print(f"\nüéâ Test r√©ussi! Accuracy finale: {accuracy:.4f}")
        
        # Sauvegarde des informations importantes
        print(f"\nüìã Informations importantes:")
        print(f"   ‚Ä¢ Dataset: {data.shape[0]} √©chantillons")
        print(f"   ‚Ä¢ Features: {X_train.shape[1]} variables")
        print(f"   ‚Ä¢ Classes: Pas besoin irrigation (0), Besoin irrigation (1)")
        print(f"   ‚Ä¢ Train: {len(y_train)}, Test: {len(y_test)}")
        print(f"   ‚Ä¢ Accuracy: {accuracy:.1%}")
        
        if accuracy > 0.8:
            print("‚úÖ Excellentes performances! Le syst√®me est pr√™t pour SPADE.")
        elif accuracy > 0.7:
            print("‚úÖ Bonnes performances! Le syst√®me fonctionne bien.")
        else:
            print("‚ö†Ô∏è Performances moyennes. V√©rifiez les donn√©es.")
    
    else:
        print("‚ùå Test √©chou√©. V√©rifiez les erreurs ci-dessus.")

if __name__ == "__main__":
    import os
    
    # Cr√©er le dossier results
    os.makedirs("results", exist_ok=True)
    
    # Lancer le test
    main() 